#include <iostream>
#include <fstream>
#include <string>

using namespace std;

void Data_Grab();																	//function prototypes
void Output_Name();

string output_file;																	//global string, used to store the users choice of final output file name 

int main ()
{
	string str_timestamp;															//string to store the timestamps
	string str_rawdata;																//string to hold the raw, nonaveraged data input
	string workspace1;																//string used for string parsing.
	string str_temp;																//string used for string parsing
	string trash;																	//string used to remove an empty space generated by 'Timestamp' output
	int index;																		//int for indexing and looping
	int j;																			//int for indexing and looping
	float k;																		//float used to calculate the summed total of a line of data
	float avg;																		//float used to store the average of each operation
	ifstream inData;																//ifstream for incoming data
	ofstream outData;																//ofstream for outgoing data

	index=0;																		//initializing loop counters and indexers
	j=0;
	k=0;

	Data_Grab();																	//function calls
	Output_Name();

	inData.open("Timestamp.txt");													//opens the file generated by 'Data_Grab'. Contains timestamps and raw data
	outData.open(output_file);														//opens the outputfile, named by the user. Users choice is decided in function 'Output_Name'

	getline(inData,trash);															//Timestamp.txt started with a blank line. This assigns that blank line to the trash variable, so the following loop will start at the data

	while (inData.good())															//loop runs for as long as there is new data in 'Timestamp'
	{
		getline(inData,str_timestamp);												//'Timestamp.txt' outputs data in pairs, the first line is the timestamp, the second line is the raw data
		getline(inData,str_rawdata);
		str_temp=str_rawdata;														//uses str_temp to calculate the average of the str_rawdata
	
		for(j==0; j<25; j++)														//for loop to calculate the average of each data line. 25 inputs each line of data
		{
			
			index=str_temp.find(" ");												//finding blank space for string parsing
			workspace1=str_temp.substr(0,index);									//workspace1 is defined to be a single data entry in the line
			k = k + stoi(workspace1);												//atoi converts workspace1, a str variable, to k, a float variable
			str_temp=str_temp.substr(index+1,str_temp.length());					//shorten str_temp to start at the next good data input

		}
		avg=(k/25);																	//calculate the average of each data by the summed total, stored in K
												
		cout << str_timestamp << " Average Output: " << avg << endl;				//output the information on the terminal
		cout << str_rawdata << endl << endl;
	
		outData << str_timestamp << " Average Output: " << avg << '\n' << str_rawdata << '\n' << '\n';		//output the information to user determined file

		j=0;																		//reinitialize loop counters 
		k=0;
	}

	cout << "Thank you for making a simple program happy." << endl << "Have a wonderful day!" << endl;		//standard gratitude 

system("pause");
return 0;

}

void Output_Name ()
{
	cout << "What would you like the output file to be named?" << endl;				//this function gets an output file name and file type from the user
	cout << "Be sure to include the file extension type at the end of the file name." << endl;
	cout << "   Text document, '.txt'. Spreadsheet, '.xls'. Data file, '.dat'." << endl << endl;
	cout << "Example: 'example.txt' would produce a text file named 'example'." << endl << endl;
	cin >> output_file;																//user choice is stored in the global variable output_file, which is used for outData in the main
	cout << endl;

	cout << "The analysis of 'OperationActive' for electric_61-66 is as follows:" << endl;
}

void Data_Grab()
{

	ifstream inData;																//ifstream for incoming file
	ofstream outData;																//ofstream for outgoing file
	string workspace1;																//standard strings for string parsing
	string workspace2;
	int ind;																		//integers used for looping
	int i;
	int j;

	ind=0; i=0; j=0;																//initializing counters

	inData.open("OperationActive-2015.xml");												//opening the source file
	outData.open("Timestamp.txt");													//opening the output file, labeled 'Timestamp.txt'. Heavily used in the main funciton

	for (i==0; i<88; i++)															//for loop to to cycle through source file, line by line
	{
		getline(inData,workspace1);													//assign each line to workspace1
	if (i==71 || i==74 || i==77 || i==80 || i==83 || i==86 )						//flag specific lines to exract timestamp information
	{
	ind=workspace1.find("timestamp=");												//find the location of the phrase 'timestamp='
	workspace1=workspace1.substr(ind+11,workspace1.length());						//workspace1 starts 11 digits after the index, enough to not contain 'timestamp=', to the rest of the string
	workspace2=workspace1.substr(0,23);												//each timestamp data is 23 characters long. workspace1 now defines a single timestamp

	outData << endl << workspace2 << ":";											//output that timestamp data to the 'Timestamp.txt' file
	}
			
	if (i==72 || i==75 || i==78 || i==81 || i==84 || i==87)							//flag specific lines to extract raw data
		{
			outData << '\n' << workspace1;											//output entire line of raw data to 'Timestamp.txt'
		}
	}
}
